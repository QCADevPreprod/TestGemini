import {
    ALPHA_STAGE,
    BETA_STAGE,
    GAMMA_STAGE,
    PREPROD_STAGE,
    PROD_ARTIFACT_BUILDER_STAGE, PROD_REGRESSION_STAGE, PROD_STAGE
} from "./stages";

export const TASK_LAUNCHER_TIMEOUT_MINUTES: number = 5
export const TASK_STATUS_REPORTER_TIMEOUT_MINUTES: number = 5
export const TASK_STOPPER_TIMEOUT_MINUTES: number = 5

export const DEFAULT_SQS_RECEIVE_MESSAGE_WAIT_TIME_SECONDS: number = 10 // //Use SQS long polling with medium value

// 1h timeout threshold to have parity with the v1 workflow
export const DEFAULT_MAX_DETECTOR_TASK_TIMEOUT_MINUTES: number = 60
 
//5min heartbeat duration. The workflow will timeout if it doesn't get a heartbeat within 5 min
//The workflow will retry to run the task when it times out
export const DEFAULT_DETECTOR_HOSTING_WORKFLOW_HEARTBEAT_MINUTES: number = 5;

export const SQS_RECEIVE_MESSAGE_WAIT_TIME_SECONDS : Map<string, number> = new Map([
    [PROD_ARTIFACT_BUILDER_STAGE, DEFAULT_SQS_RECEIVE_MESSAGE_WAIT_TIME_SECONDS],
    [PROD_REGRESSION_STAGE, DEFAULT_SQS_RECEIVE_MESSAGE_WAIT_TIME_SECONDS],
    [PREPROD_STAGE, DEFAULT_SQS_RECEIVE_MESSAGE_WAIT_TIME_SECONDS],
    [PROD_STAGE, DEFAULT_SQS_RECEIVE_MESSAGE_WAIT_TIME_SECONDS],
    [GAMMA_STAGE, DEFAULT_SQS_RECEIVE_MESSAGE_WAIT_TIME_SECONDS],
    [BETA_STAGE, DEFAULT_SQS_RECEIVE_MESSAGE_WAIT_TIME_SECONDS],
    [ALPHA_STAGE, DEFAULT_SQS_RECEIVE_MESSAGE_WAIT_TIME_SECONDS]
]);

export const DEFAULT_SQS_VISIBILITY_TIMEOUT_SECONDS: number = 5 * 60 //Message will become visible again after 5 min.
//The task acknowledges the message as soon as it receives it.
export const CONSOLAS_SQS_VISIBILITY_TIMEOUT_SECONDS: number = 5

export const SQS_VISIBILITY_TIMEOUT_SECONDS : Map<string, number> = new Map([
    [PROD_ARTIFACT_BUILDER_STAGE, DEFAULT_SQS_VISIBILITY_TIMEOUT_SECONDS],
    [PROD_REGRESSION_STAGE, DEFAULT_SQS_VISIBILITY_TIMEOUT_SECONDS],
    [PREPROD_STAGE, DEFAULT_SQS_VISIBILITY_TIMEOUT_SECONDS],
    [PROD_STAGE, DEFAULT_SQS_VISIBILITY_TIMEOUT_SECONDS],
    [GAMMA_STAGE, DEFAULT_SQS_VISIBILITY_TIMEOUT_SECONDS],
    [BETA_STAGE, DEFAULT_SQS_VISIBILITY_TIMEOUT_SECONDS],
    [ALPHA_STAGE, DEFAULT_SQS_VISIBILITY_TIMEOUT_SECONDS]
]);


export const DEFAULT_SQS_RETENTION_SECONDS: number = 5 * 60

export const SQS_RETENTION_SECONDS : Map<string, number> = new Map([
    [PROD_ARTIFACT_BUILDER_STAGE, DEFAULT_SQS_RETENTION_SECONDS],
    [PROD_REGRESSION_STAGE, DEFAULT_SQS_RETENTION_SECONDS],
    [PREPROD_STAGE, DEFAULT_SQS_RETENTION_SECONDS],
    [PROD_STAGE, DEFAULT_SQS_RETENTION_SECONDS],
    [GAMMA_STAGE, DEFAULT_SQS_RETENTION_SECONDS],
    [BETA_STAGE, DEFAULT_SQS_RETENTION_SECONDS],
    [ALPHA_STAGE, DEFAULT_SQS_RETENTION_SECONDS]
]);

export const DETECTOR_HOSTING_WORKFLOW_HEARTBEAT_SECONDS : Map<string, number> = new Map([
    [PROD_ARTIFACT_BUILDER_STAGE, DEFAULT_DETECTOR_HOSTING_WORKFLOW_HEARTBEAT_MINUTES * 60],
    [PROD_REGRESSION_STAGE, DEFAULT_DETECTOR_HOSTING_WORKFLOW_HEARTBEAT_MINUTES * 60],
    [PREPROD_STAGE, DEFAULT_DETECTOR_HOSTING_WORKFLOW_HEARTBEAT_MINUTES * 60],
    [PROD_STAGE, DEFAULT_DETECTOR_HOSTING_WORKFLOW_HEARTBEAT_MINUTES * 60],
    [GAMMA_STAGE, DEFAULT_DETECTOR_HOSTING_WORKFLOW_HEARTBEAT_MINUTES * 60],
    [BETA_STAGE, DEFAULT_DETECTOR_HOSTING_WORKFLOW_HEARTBEAT_MINUTES * 60],
    [ALPHA_STAGE, DEFAULT_DETECTOR_HOSTING_WORKFLOW_HEARTBEAT_MINUTES * 60]
]);
 
export const MAX_DETECTOR_TASK_TIMEOUT_SECONDS : Map<string, number> = new Map([
    [PROD_ARTIFACT_BUILDER_STAGE, DEFAULT_MAX_DETECTOR_TASK_TIMEOUT_MINUTES * 60],
    [PROD_REGRESSION_STAGE, DEFAULT_MAX_DETECTOR_TASK_TIMEOUT_MINUTES * 60],
    [PREPROD_STAGE, DEFAULT_MAX_DETECTOR_TASK_TIMEOUT_MINUTES * 60],
    [PROD_STAGE, DEFAULT_MAX_DETECTOR_TASK_TIMEOUT_MINUTES * 60],
    [GAMMA_STAGE, DEFAULT_MAX_DETECTOR_TASK_TIMEOUT_MINUTES * 60],
    [BETA_STAGE, DEFAULT_MAX_DETECTOR_TASK_TIMEOUT_MINUTES * 60],
    [ALPHA_STAGE, DEFAULT_MAX_DETECTOR_TASK_TIMEOUT_MINUTES * 60]
]);